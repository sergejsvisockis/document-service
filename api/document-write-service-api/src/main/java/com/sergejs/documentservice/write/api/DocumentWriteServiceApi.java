/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sergejs.documentservice.write.api;

import com.sergejs.documentservice.write.api.model.ClaimDocumentRequest;
import com.sergejs.documentservice.write.api.model.DocumentResponse;
import com.sergejs.documentservice.write.api.model.InvoiceDocumentRequest;
import com.sergejs.documentservice.write.api.model.PolicyDocumentRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-30T11:20:52.840464+02:00[Europe/Stockholm]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "document-write-service", description = "the document-write-service API")
public interface DocumentWriteServiceApi {

    /**
     * POST /claim-document-write : Create claim document
     * Write claim metadata into the database and trigger PDF generation
     *
     * @param claimDocumentRequest  (optional)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "writeClaimDocument",
        summary = "Create claim document",
        description = "Write claim metadata into the database and trigger PDF generation",
        tags = { "document-write-service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/claim-document-write",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<DocumentResponse> writeClaimDocument(
        @Parameter(name = "ClaimDocumentRequest", description = "") @Valid @RequestBody(required = false) ClaimDocumentRequest claimDocumentRequest
    );


    /**
     * POST /invoice-document-write : Create invoice document
     * Write an invoice document metadata into the database and trigger PDF generation
     *
     * @param invoiceDocumentRequest  (optional)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "writeInvoiceDocument",
        summary = "Create invoice document",
        description = "Write an invoice document metadata into the database and trigger PDF generation",
        tags = { "document-write-service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/invoice-document-write",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<DocumentResponse> writeInvoiceDocument(
        @Parameter(name = "InvoiceDocumentRequest", description = "") @Valid @RequestBody(required = false) InvoiceDocumentRequest invoiceDocumentRequest
    );


    /**
     * POST /policy-document-write : Create policy document
     * Write the policy metadata into the database and trigger PDF generation
     *
     * @param policyDocumentRequest  (optional)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "writePolicyDocument",
        summary = "Create policy document",
        description = "Write the policy metadata into the database and trigger PDF generation",
        tags = { "document-write-service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/policy-document-write",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<DocumentResponse> writePolicyDocument(
        @Parameter(name = "PolicyDocumentRequest", description = "") @Valid @RequestBody(required = false) PolicyDocumentRequest policyDocumentRequest
    );

}
