/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sergejs.documentservice.read.api;

import com.sergejs.documentservice.read.api.model.DocumentResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;
import java.util.UUID;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-30T11:20:52.824015+02:00[Europe/Stockholm]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "document-read-service", description = "the document-read-service API")
public interface DocumentReadServiceApi {

    /**
     * POST /documents/{documentType} : Get a metadata of all the documents by specific type
     * Shall return a metadata of all the possible documents by its type.
     *
     * @param documentType Searchable document types (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "readAllDocuments",
        summary = "Get a metadata of all the documents by specific type",
        description = "Shall return a metadata of all the possible documents by its type.",
        tags = { "document-read-service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DocumentResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/documents/{documentType}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<DocumentResponse>> readAllDocuments(
        @Parameter(name = "documentType", description = "Searchable document types", required = true, in = ParameterIn.PATH) @PathVariable("documentType") String documentType
    );


    /**
     * POST /documents/{documentId} : Get a metadata of the document by its ID
     * Shall return a metadata of a single document by its ID. Afterwards it is possible to search for that one in the S3.
     *
     * @param documentId Searchable document Id (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "readSingleDocument",
        summary = "Get a metadata of the document by its ID",
        description = "Shall return a metadata of a single document by its ID. Afterwards it is possible to search for that one in the S3.",
        tags = { "document-read-service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/documents/{documentId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<DocumentResponse> readSingleDocument(
        @Parameter(name = "documentId", description = "Searchable document Id", required = true, in = ParameterIn.PATH) @PathVariable("documentId") UUID documentId
    );

}
